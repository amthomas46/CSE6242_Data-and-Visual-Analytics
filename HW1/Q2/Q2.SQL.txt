-- Setup. DO NOT REMOVE.
.headers on
.mode list
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]


create table movies(
id INTEGER,
name TEXT,
score INTEGER
);

create table cast(
movie_id INTEGER,
cast_id INTEGER,
cast_name TEXT
);





-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]


.import movie-name-score.txt movies

.import movie-cast.txt cast



-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

CREATE INDEX scores_index ON movies(score);
CREATE INDEX cast_index ON cast(cast_id);
CREATE INDEX movie_index ON movies(id);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate average score

-- [insert your SQL statement(s) BELOW this line]

SELECT AVG(score) FROM movies as average_score WHERE score>=5;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find poor movies

-- [insert your SQL statement(s) BELOW this line]

SELECT id AS id, name AS name, score AS score FROM movies
ORDER BY score ASC, name ASC
LIMIT 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find laid back actors

-- [insert your SQL statement(s) BELOW this line]


SELECT cast_id AS cast_id, cast_name AS cast_name , count(movie_id) AS movie_count FROM cast
GROUP BY cast_id
HAVING count(movie_id) == 2
ORDER BY cast_name ASC
LIMIT 10;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]

SELECT cast_id, cast_name, average_score FROM
(SELECT c.cast_id, c.cast_name, AVG(m.score) as average_score, c.movie_id , COUNT(c.movie_id) as cnt FROM cast c
INNER JOIN movies m ON c.movie_id = m.id
WHERE m.score >= 40
GROUP BY c.cast_id)
WHERE cnt > 2
ORDER BY average_score DESC, cast_name ASC
LIMIT 10;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]



CREATE VIEW good_collaboration AS
SELECT cast_member_id1, cast_member_id2, count(*) as movie_count, AVG(score) as average_movie_score FROM
(SELECT M.score, A.movie_id, A.cast_id as cast_member_id1, B.cast_id as cast_member_id2 
FROM cast A, cast B
INNER JOIN movies M ON M.id = A.movie_id
WHERE A.cast_id < B.cast_id
AND A.movie_id = B.movie_id
ORDER BY A.cast_id ASC)
GROUP BY cast_member_id1, cast_member_id2
HAVING movie_count>=3 AND average_movie_score>=50 
ORDER BY movie_count ASC;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]


SELECT T.cast_id , cast_name , AVG(average_movie_score) as collaboration_score FROM 
(SELECT cast_member_id1 AS cast_id, movie_count, average_movie_score FROM good_collaboration
UNION ALL
SELECT cast_member_id2 AS cast_id, movie_count, average_movie_score FROM good_collaboration) T
INNER JOIN cast C ON C.cast_id = T.cast_id
GROUP BY T.cast_id
ORDER BY collaboration_score DESC
LIMIT 5;





-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]

CREATE VIRTUAL TABLE movie_overview USING fts3(
id integer primary key,
name text,
year integer,
overview text,
popularity decimal
);


.import movie-overview.txt movie_overview


-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]

SELECT COUNT(*) AS count_overview FROM movie_overview WHERE overview MATCH 'fight';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]

SELECT id FROM movie_overview WHERE overview MATCH 'love NEAR/5 story';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --